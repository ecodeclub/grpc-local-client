package genclient

import (
	"testing"

	plugin_go "github.com/golang/protobuf/protoc-gen-go/plugin"
	"github.com/stretchr/testify/assert"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

func TestGenerator_Generate(t *testing.T) {

	testCases := map[string]struct {
		fileToGenerate []string
		protoFiles     []*descriptorpb.FileDescriptorProto

		expectedContents []string
	}{
		"单文件多服务": {
			fileToGenerate: []string{"helloworld/v1/helloworld.proto"},
			protoFiles: []*descriptorpb.FileDescriptorProto{
				getHelloworldFileDescriptorProto(),
			},
			expectedContents: []string{`// Code generated by protoc-gen-go-grpc-local-client. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc-local-client v0.0.2
// - protoc             (unknown)
// source: helloworld/v1/helloworld.proto

package helloworldv1

import (
	context "context"
	grpc "google.golang.org/grpc"
)

var _ GreeterServiceClient = (*greeterServiceLocalClient)(nil)

type greeterServiceLocalClient struct {
	server GreeterServiceServer
}

func NewGreeterServiceLocalClient(server GreeterServiceServer) GreeterServiceClient {
	return &greeterServiceLocalClient{
		server: server,
	}
}

func (s *greeterServiceLocalClient) SayHello(ctx context.Context, req *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	return s.server.SayHello(ctx, req)
}

var _ HelloWorldServiceClient = (*helloWorldServiceLocalClient)(nil)

type helloWorldServiceLocalClient struct {
	server HelloWorldServiceServer
}

func NewHelloWorldServiceLocalClient(server HelloWorldServiceServer) HelloWorldServiceClient {
	return &helloWorldServiceLocalClient{
		server: server,
	}
}

func (s *helloWorldServiceLocalClient) SayHello(ctx context.Context, req *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	return s.server.SayHello(ctx, req)
}
`},
		},
	}

	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			// arrange
			req := &plugin_go.CodeGeneratorRequest{
				FileToGenerate: tc.fileToGenerate,
				ProtoFile:      tc.protoFiles,
			}
			options := protogen.Options{}
			gen, err := options.New(req)
			assert.NoError(t, err)
			// act
			for i, f := range gen.Files {
				if !f.Generate {
					continue
				}
				g := NewGenerator(gen, f)
				assert.NoError(t, g.Generate())

				content, err := g.Content()
				assert.NoError(t, err)
				assert.Equal(t, tc.expectedContents[i], string(content))
			}
			// assert
			resp := gen.Response()
			assert.Equal(t, len(tc.expectedContents), len(resp.File))
			for i := 0; i < len(resp.File); i++ {
				assert.Equal(t, tc.expectedContents[i], *resp.File[i].Content)
			}
		})
	}

}

func getHelloworldFileDescriptorProto() *descriptorpb.FileDescriptorProto {
	fileProto := &descriptorpb.FileDescriptorProto{
		Name:    proto.String("helloworld/v1/helloworld.proto"),
		Syntax:  proto.String("proto3"),
		Package: proto.String("helloworld.v1"),
		Options: &descriptorpb.FileOptions{
			GoPackage: proto.String("helloworld/v1;helloworldv1"),
		},
		MessageType: []*descriptorpb.DescriptorProto{
			{
				Name: proto.String("SayHelloRequest"),
				Field: []*descriptorpb.FieldDescriptorProto{
					{
						Name:   proto.String("name"),
						Number: proto.Int32(1),
						Label:  descriptorpb.FieldDescriptorProto_LABEL_OPTIONAL.Enum(),
						Type:   descriptorpb.FieldDescriptorProto_TYPE_STRING.Enum(),
					},
				},
			},
			{
				Name: proto.String("SayHelloResponse"),
				Field: []*descriptorpb.FieldDescriptorProto{
					{
						Name:   proto.String("message"),
						Number: proto.Int32(1),
						Label:  descriptorpb.FieldDescriptorProto_LABEL_OPTIONAL.Enum(),
						Type:   descriptorpb.FieldDescriptorProto_TYPE_STRING.Enum(),
					},
				},
			},
		},
		Service: []*descriptorpb.ServiceDescriptorProto{
			{
				Name: proto.String("GreeterService"),
				Method: []*descriptorpb.MethodDescriptorProto{
					{
						Name:       proto.String("SayHello"),
						InputType:  proto.String(".helloworld.v1.SayHelloRequest"),
						OutputType: proto.String(".helloworld.v1.SayHelloResponse"),
					},
				},
			},
			{
				Name: proto.String("HelloWorldService"),
				Method: []*descriptorpb.MethodDescriptorProto{
					{
						Name:       proto.String("SayHello"),
						InputType:  proto.String(".helloworld.v1.SayHelloRequest"),
						OutputType: proto.String(".helloworld.v1.SayHelloResponse"),
					},
				},
			},
		},
	}

	return fileProto
}
