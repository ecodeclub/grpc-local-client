package genclient

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"google.golang.org/protobuf/compiler/protogen"
	"testing"
)

func TestGenerator_Generate(t *testing.T) {
	testCases := []struct {
		name string
		f    *protogen.File
		p    *protogen.Plugin

		wantErr     error
		wantContent string
	}{
		{
			name: "多个服务",
			f: &protogen.File{
				GoPackageName:           "helloworldv1",
				GeneratedFilenamePrefix: "hello_world",
				GoImportPath:            "helloworldv2",
				Services: []*protogen.Service{
					{
						GoName: "HelloWorldService",
						Methods: []*protogen.Method{
							{
								GoName: "SayHello",
								Input: &protogen.Message{
									GoIdent: protogen.GoIdent{
										GoName: "HelloRequest",
									},
								},
								Output: &protogen.Message{
									GoIdent: protogen.GoIdent{
										GoName: "HelloResponse",
									},
								},
							},
						},
					},
					{
						GoName: "HelloWorldService",
						Methods: []*protogen.Method{
							{
								GoName: "SayHello",
								Input: &protogen.Message{
									GoIdent: protogen.GoIdent{
										GoName: "HelloRequest",
									},
								},
								Output: &protogen.Message{
									GoIdent: protogen.GoIdent{
										GoName: "HelloResponse",
									},
								},
							},
						},
					},
				},
			},
			p: &protogen.Plugin{},
			wantContent: `// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Version v0.0.1.
package helloworldv1

import (
	context "context"
	grpc "google.golang.org/grpc"
)

var _ HelloWorldServiceClient = (*HelloWorldServiceLocalClient)(nil)

type HelloWorldServiceLocalClient struct {
	server HelloWorldServiceServer
}

func NewHelloWorldServiceLocalClient(server HelloWorldServiceServer) *HelloWorldServiceLocalClient {
	return &HelloWorldServiceLocalClient{
		server: server,
	}
}

func (s *HelloWorldServiceLocalClient) SayHello(ctx context.Context, req *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	return s.server.SayHello(ctx, req)
}

var _ HelloWorldServiceClient = (*HelloWorldServiceLocalClient)(nil)

type HelloWorldServiceLocalClient struct {
	server HelloWorldServiceServer
}

func NewHelloWorldServiceLocalClient(server HelloWorldServiceServer) *HelloWorldServiceLocalClient {
	return &HelloWorldServiceLocalClient{
		server: server,
	}
}

func (s *HelloWorldServiceLocalClient) SayHello(ctx context.Context, req *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	return s.server.SayHello(ctx, req)
}
`,
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			g := NewGenerator(tc.p, tc.f)
			err := g.Generate()
			assert.Equal(t, tc.wantErr, err)
			ct, err := g.Content()
			require.NoError(t, err)
			assert.Equal(t, tc.wantContent, string(ct))
		})
	}
}
